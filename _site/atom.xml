<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>gregg hernandez</title>
 <link href="http://gregghz.github.io/atom.xml" rel="self"/>
 <link href="http://gregghz.github.io/"/>
 <updated>2013-11-27T10:14:06-07:00</updated>
 <id>http://gregghz.github.io</id>
 <author>
   <name>gregg hernandez</name>
 </author>
 
 
 <entry>
   <title>Lazy Lists and Android</title>
   <link href="http://gregghz.github.io/posts/lazy-lists"/>
   <updated>2013-11-27T10:01:27-07:00</updated>
   <id>http://gregghz.github.io/posts/lazy-lists</id>
   <content type="html">&lt;p&gt;Chet Haase has an article over at &lt;a href=&#39;http://graphics-geek.blogspot.com/&#39;&gt;CodeDependent&lt;/a&gt; called &lt;a href=&#39;http://graphics-geek.blogspot.com/2013/09/lazy-lists.html&#39;&gt;Lazy Lists&lt;/a&gt;. I think the main point of the article is to illustrate a simple technique to avoid unnecessary memory allocation in a constrained environment like Android. He gives a solution (in Java, naturally) showing how to lazily instantiate a couple of lists only once the lists are actually needed. It&amp;#8217;s simple enough. If the list we&amp;#8217;re adding to is null, instantiate it and add the item, otherwise, just add the item.&lt;/p&gt;

&lt;p&gt;There are two oddities in his implementation I&amp;#8217;d like to point out, and then mostly ignore. He checks for uniqueness when adding an item to a list. Chet does mention this as peculiar to his situation but doesn&amp;#8217;t elaborate. In generel this makes a List seem like an odd choice of data structures. A Set would probably be a much better choice (I&amp;#8217;ll give an example later). He is also nulling out the list once it reaches a length of zero. I can only guess that this is an attempt to get the list GC&amp;#8217;d more quickly once it&amp;#8217;s no longer needed. However, I think in general, it&amp;#8217;s not a good idea to assume that a list of length zero means the same thing as a list we don&amp;#8217;t need anymore so I&amp;#8217;m going to ignore this bit, but I do concede that in specific cases this could be a fair assumption.&lt;/p&gt;

&lt;p&gt;Overall, I think Chet&amp;#8217;s general idea is a good one. It&amp;#8217;s a very simple instance of lazy evaluation. You don&amp;#8217;t allocate a new list until you know you need that list. This saves a bit of memory and a few CPU cycles. He basically abstracts out the details of this lazy instantiation into two static methods so that the consumer of one of these lazy lists doesn&amp;#8217;t ever have to worry about the details of how it works.&lt;/p&gt;

&lt;p&gt;More than anything, I think this pattern does more to highlight the weaknesses of Java than anything else. A (very) little scala will do the job for us just fine.&lt;/p&gt;

&lt;p&gt;If we ignore the oddities I mentioned above (nulling out the empty list by instead opting to reuse the already allocated list, and checking for uniqueness when inserting into the list) the equivilent scala code would look like this (I&amp;#8217;m going to stick to using Java&amp;#8217;s data structures for now, that&amp;#8217;s a Java List, not a Scala List):&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;scala&#39;&gt;&lt;span class=&#39;k&#39;&gt;class&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;LazyLists&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;lazy&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;val&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;intList&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;List&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;Int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;new&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;ArrayList&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;Int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]()&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;lazy&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;val&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;floatList&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;List&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;Double&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;new&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;ArrayList&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;Double&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]()&lt;/span&gt;
        
    &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addItemBest&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Unit&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;intList&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;add&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;addItemBest&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Double&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Unit&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;floatList&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;add&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;removeItemBest&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Unit&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;intList&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;remove&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;Object&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;])&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;removeItemBest&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Double&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Unit&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;floatList&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;remove&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#8217;s it. We don&amp;#8217;t need a helper class (Chet&amp;#8217;s LazyListManager). And we still don&amp;#8217;t have to think about when/where we are initializing these lists. Scala&amp;#8217;s lazy keyword takes care of all the boilerplate Java makes you work so hard to hide.&lt;/p&gt;

&lt;p&gt;You can compare the Scala and Java implementations in a &lt;a href=&#39;https://gist.github.com/gregghz/7677880&#39;&gt;gist&lt;/a&gt; I created.&lt;/p&gt;

&lt;p&gt;I think the biggest advantage here is that the lazy keyword can be applied to any data. The original example would only work on Lists. You would need a new helper class for each type of data you wanted to lazily instantiate (or at least a sufficiently general helper).&lt;/p&gt;

&lt;p&gt;In Chet&amp;#8217;s post, he required each element to be unique. How can we accomplish that? We could create a helper class, as Chet did, and send all add and remove requests through that helper. But again, we&amp;#8217;d end up needing a helper for each type we want to lazily instantiate. As I mentioned above, we can just use Sets (specifically a &lt;a href=&#39;http://www.scala-lang.org/api/current/index.html#scala.collection.mutable.LinkedHashSet&#39;&gt;mutable.LinkedHashSet&lt;/a&gt; so we can maintain traversal order and the mutation semantics in the original example):&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;scala&#39;&gt;&lt;span class=&#39;k&#39;&gt;class&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;LazySets&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;lazy&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;val&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;intSet&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Set&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;Int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;LinkedHashSet&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;Int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]()&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;lazy&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;val&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;floatSet&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Set&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;Double&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;LinkedHashSet&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;Double&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]()&lt;/span&gt;

    &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;add&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Unit&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;intSet&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;add&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;add&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Double&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Unit&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;floatSet&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;add&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;remove&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Unit&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;intSet&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;remove&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;remove&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Double&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Unit&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;floatSet&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;remove&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;item&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Chet could have used a &lt;a href=&#39;https://developer.android.com/reference/java/util/LinkedHashSet.html&#39;&gt;java.util.LinkedHashSet&lt;/a&gt; in his example as well. I&amp;#8217;m not sure why he didn&amp;#8217;t. He only mentions his desire for unique elements and then continues to use a List. My point in showing the code above is only to illustrate that lazy is no respecter of persons. It will work with any data structure. It will work with any expression, in fact.&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;scala&#39;&gt;&lt;span class=&#39;k&#39;&gt;lazy&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;val&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;12&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;lazy&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;val&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;b&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;someComplexFunction&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;()&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;lazy&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;val&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;c&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;*&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;100&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;-&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;15&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;99&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;True&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each of these will only evaluate the value on the right hand side when the variable is accessed for the first time. It&amp;#8217;s as though they were all written like this:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;scala&#39;&gt;&lt;span class=&#39;k&#39;&gt;val&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;athunk&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;12&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt; &lt;span class=&#39;mi&#39;&gt;15&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;var&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;_a&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Option&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;Int&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;None&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;val&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;match&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;_a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;Some&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;a&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;case&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;None&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;_a&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;Some&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;athunk&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;());&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;_a&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just using the lazy keyword is much simpler.&lt;/p&gt;

&lt;p&gt;Now you might be saying something like, &amp;#8220;this is all great, but Android uses Java, not Scala, so it&amp;#8217;s really useless for my Android projects.&amp;#8221; Fortunately, Scala compiles to Java bytecode. The Android build system turns bytecode into .dex files for Dalvik. That means it&amp;#8217;s not too difficult to use Scala on Android. To help you out (and because you really should stop using Java) I found a sample Android project that utilizes Scala.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;https://github.com/jayway/maven-android-plugin-samples/tree/master/scala&#39;&gt;jayway/maven-android-plugin-samples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a later post I plan to talk about real lazy lists. That is, lists whose elements are evaluated lazily. Look out for that. I think it&amp;#8217;s a much more interesting topic than the lazy keyword itself.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Lazy</title>
   <link href="http://gregghz.github.io/posts/lazy"/>
   <updated>2013-11-26T17:29:28-07:00</updated>
   <id>http://gregghz.github.io/posts/lazy</id>
   <content type="html">//import java.util.ArrayList
//import java.util.List

class LazyLists {
  lazy val intList: List[Int] = new ArrayList[Int]()
  lazy val floatList: List[Double] = new ArrayList[Double]()
  
  def addItemBest(item: Int): Unit = intList.add(item)
  def addItemBest(item: Double): Unit = floatList.add(item)
  def removeItemBest(item: Int): Unit = intList.remove(item.asInstanceOf[Object])
  def removeItemBest(item: Double): Unit = floatList.remove(item)
}
</content>
 </entry>
 
 <entry>
   <title>Hello World</title>
   <link href="http://gregghz.github.io/posts/blog-about-learning-math-and-programming"/>
   <updated>2013-10-23T00:00:00-06:00</updated>
   <id>http://gregghz.github.io/posts/blog-about-learning-math-and-programming</id>
   <content type="html">&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;go&#39;&gt;&lt;span class=&#39;kd&#39;&gt;func&lt;/span&gt; &lt;span class=&#39;nx&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;()&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;nx&#39;&gt;fmt&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;Println&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;scala&#39;&gt;&lt;span class=&#39;k&#39;&gt;class&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;Hello&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;main&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;args&lt;/span&gt;&lt;span class=&#39;k&#39;&gt;:&lt;/span&gt; &lt;span class=&#39;kt&#39;&gt;Array&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;kt&#39;&gt;String&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;])&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;{&lt;/span&gt;
        &lt;span class=&#39;n&#39;&gt;println&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s&#39;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;o&#39;&gt;}&lt;/span&gt;
&lt;span class=&#39;o&#39;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;javascript&#39;&gt;&lt;span class=&#39;nx&#39;&gt;process&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;stdout&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;nx&#39;&gt;write&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;s2&#39;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#160;&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;haskell&#39;&gt;&lt;span class=&#39;nf&#39;&gt;main&lt;/span&gt; &lt;span class=&#39;ow&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;print&lt;/span&gt; &lt;span class=&#39;s&#39;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 
</feed>